module iota.window.backend_x11;
 import core.stdc.config;

version (Windows) {

} else {
	import x11.X;
	import x11.Xlib;
	import x11.Xutil;
	import bindbc.opengl;
	import core.stdc.stdint;
	public import core.stdc.config;
	alias GLXContextID = XID;
	struct __GLXFBConfigRec {}
	alias GLXFBConfigP = __GLXFBConfigRec*;
	struct __GLXcontextRec {}
	alias GLXContext = __GLXcontextRec*;
	alias GLXWindow = XID;
	alias GLXPbuffer = XID;
	alias GLXDrawable = XID;
	alias GLXPixmap = XID;

	enum GLX_RGBA                      = 4;
	enum GLX_DOUBLEBUFFER              = 5;
	enum GLX_DEPTH_SIZE                = 12;
	enum GLX_WINDOW_BIT                = 0x00000001;
	enum GLX_PIXMAP_BIT                = 0x00000002;
	enum GLX_PBUFFER_BIT               = 0x00000004;
	enum GLX_RGBA_BIT                  = 0x00000001;
	enum GLX_COLOR_INDEX_BIT           = 0x00000002;
	enum GLX_PBUFFER_CLOBBER_MASK      = 0x08000000;
	enum GLX_FRONT_LEFT_BUFFER_BIT     = 0x00000001;
	enum GLX_FRONT_RIGHT_BUFFER_BIT    = 0x00000002;
	enum GLX_BACK_LEFT_BUFFER_BIT      = 0x00000004;
	enum GLX_BACK_RIGHT_BUFFER_BIT     = 0x00000008;
	enum GLX_AUX_BUFFERS_BIT           = 0x00000010;
	enum GLX_DEPTH_BUFFER_BIT          = 0x00000020;
	enum GLX_STENCIL_BUFFER_BIT        = 0x00000040;
	enum GLX_ACCUM_BUFFER_BIT          = 0x00000080;
	enum GLX_CONFIG_CAVEAT             = 0x20;
	enum GLX_X_VISUAL_TYPE             = 0x22;
	enum GLX_TRANSPARENT_TYPE          = 0x23;
	enum GLX_TRANSPARENT_INDEX_VALUE   = 0x24;
	enum GLX_TRANSPARENT_RED_VALUE     = 0x25;
	enum GLX_TRANSPARENT_GREEN_VALUE   = 0x26;
	enum GLX_TRANSPARENT_BLUE_VALUE    = 0x27;
	enum GLX_TRANSPARENT_ALPHA_VALUE   = 0x28;
	enum GLX_DONT_CARE                 = 0xFFFFFFFF;
	enum GLX_NONE                      = 0x8000;
	enum GLX_SLOW_CONFIG               = 0x8001;
	enum GLX_TRUE_COLOR                = 0x8002;
	enum GLX_DIRECT_COLOR              = 0x8003;
	enum GLX_PSEUDO_COLOR              = 0x8004;
	enum GLX_STATIC_COLOR              = 0x8005;
	enum GLX_GRAY_SCALE                = 0x8006;
	enum GLX_STATIC_GRAY               = 0x8007;
	enum GLX_TRANSPARENT_RGB           = 0x8008;
	enum GLX_TRANSPARENT_INDEX         = 0x8009;
	enum GLX_VISUAL_ID                 = 0x800B;
	enum GLX_SCREEN                    = 0x800C;
	enum GLX_NON_CONFORMANT_CONFIG     = 0x800D;
	enum GLX_DRAWABLE_TYPE             = 0x8010;
	enum GLX_RENDER_TYPE               = 0x8011;
	enum GLX_X_RENDERABLE              = 0x8012;
	enum GLX_FBCONFIG_ID               = 0x8013;
	enum GLX_RGBA_TYPE                 = 0x8014;
	enum GLX_COLOR_INDEX_TYPE          = 0x8015;
	enum GLX_MAX_PBUFFER_WIDTH         = 0x8016;
	enum GLX_MAX_PBUFFER_HEIGHT        = 0x8017;
	enum GLX_MAX_PBUFFER_PIXELS        = 0x8018;
	enum GLX_PRESERVED_CONTENTS        = 0x801B;
	enum GLX_LARGEST_PBUFFER           = 0x801C;
	enum GLX_WIDTH                     = 0x801D;
	enum GLX_HEIGHT                    = 0x801E;
	enum GLX_EVENT_MASK                = 0x801F;
	enum GLX_DAMAGED                   = 0x8020;
	enum GLX_SAVED                     = 0x8021;
	enum GLX_WINDOW                    = 0x8022;
	enum GLX_PBUFFER                   = 0x8023;
	enum GLX_PBUFFER_HEIGHT            = 0x8040;
	enum GLX_PBUFFER_WIDTH             = 0x8041;
	enum GLX_SAMPLE_BUFFERS            = 100000;
	enum GLX_SAMPLES                   = 100001;
	enum GLX_ARB_context_flush_control = 1;
	enum GLX_CONTEXT_RELEASE_BEHAVIOR_ARB = 0x2097;
	enum GLX_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB = 0;
	enum GLX_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB = 0x2098;
	enum GLX_CONTEXT_DEBUG_BIT_ARB = 0x00000001;
	enum GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB = 0x00000002;
	enum GLX_CONTEXT_MAJOR_VERSION_ARB = 0x2091;
	enum GLX_CONTEXT_MINOR_VERSION_ARB = 0x2092;
	enum GLX_CONTEXT_FLAGS_ARB = 0x2094;
	enum GLX_ARB_create_context = 1;
	enum GLX_ARB_create_context_no_error = 1;
	enum GLX_CONTEXT_OPENGL_NO_ERROR_ARB = 0x31B3;
	enum GLX_ARB_create_context_profile = 1;
	enum GLX_CONTEXT_CORE_PROFILE_BIT_ARB = 0x00000001;
	enum GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB = 0x00000002;
	enum GLX_CONTEXT_PROFILE_MASK_ARB = 0x9126;
	enum GLX_ARB_create_context_robustness = 1;
	enum GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB = 0x00000004;
	enum GLX_LOSE_CONTEXT_ON_RESET_ARB     = 0x8252;
	enum GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
	enum GLX_NO_RESET_NOTIFICATION_ARB     = 0x8261;
	enum GLX_ARB_fbconfig_float = 1;
	enum GLX_RGBA_FLOAT_TYPE_ARB           = 0x20B9;
	enum GLX_RGBA_FLOAT_BIT_ARB            = 0x00000004;
	enum GLX_ARB_framebuffer_sRGB = 1;
	enum GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB  = 0x20B2;
	enum GLX_ARB_get_proc_address = 1;
	enum GLX_ARB_multisample = 1;
	enum GLX_SAMPLE_BUFFERS_ARB            = 100000;
	enum GLX_SAMPLES_ARB                   = 100001;
	enum GLX_ARB_robustness_application_isolation = 1;
	enum GLX_CONTEXT_RESET_ISOLATION_BIT_ARB = 0x00000008;
	enum GLX_ARB_robustness_share_group_isolation = 1;
	enum GLX_ARB_vertex_buffer_object = 1;
	enum GLX_CONTEXT_ALLOW_BUFFER_BYTE_ORDER_MISMATCH_ARB = 0x2095;
	enum GLX_3DFX_multisample = 1;
	enum GLX_SAMPLE_BUFFERS_3DFX           = 0x8050;
	enum GLX_SAMPLES_3DFX                  = 0x8051;
	enum GLX_AMD_gpu_association = 1;
	enum GLX_GPU_VENDOR_AMD                = 0x1F00;
	enum GLX_GPU_RENDERER_STRING_AMD       = 0x1F01;
	enum GLX_GPU_OPENGL_VERSION_STRING_AMD = 0x1F02;
	enum GLX_GPU_FASTEST_TARGET_GPUS_AMD   = 0x21A2;
	enum GLX_GPU_RAM_AMD                   = 0x21A3;
	enum GLX_GPU_CLOCK_AMD                 = 0x21A4;
	enum GLX_GPU_NUM_PIPES_AMD             = 0x21A5;
	enum GLX_GPU_NUM_SIMD_AMD              = 0x21A6;
	enum GLX_GPU_NUM_RB_AMD                = 0x21A7;
	enum GLX_GPU_NUM_SPI_AMD               = 0x21A8;
	enum GLX_EXT_buffer_age = 1;
	enum GLX_BACK_BUFFER_AGE_EXT           = 0x20F4;
	enum GLX_EXT_context_priority = 1;
	enum GLX_CONTEXT_PRIORITY_LEVEL_EXT    = 0x3100;
	enum GLX_CONTEXT_PRIORITY_HIGH_EXT     = 0x3101;
	enum GLX_CONTEXT_PRIORITY_MEDIUM_EXT   = 0x3102;
	enum GLX_CONTEXT_PRIORITY_LOW_EXT      = 0x3103;
	enum GLX_EXT_create_context_es2_profile = 1;
	enum GLX_CONTEXT_ES2_PROFILE_BIT_EXT   = 0x00000004;
	enum GLX_EXT_create_context_es_profile = 1;
	enum GLX_CONTEXT_ES_PROFILE_BIT_EXT    = 0x00000004;
	enum GLX_EXT_fbconfig_packed_float = 1;
	enum GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT  = 0x20B1;
	enum GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT   = 0x00000008;
	enum GLX_EXT_framebuffer_sRGB = 1;
	enum GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT  = 0x20B2;
	enum GLX_EXT_get_drawable_type = 1;
	enum GLX_EXT_import_context = 1;
	enum GLX_SHARE_CONTEXT_EXT             = 0x800A;
	enum GLX_VISUAL_ID_EXT                 = 0x800B;
	enum GLX_SCREEN_EXT                    = 0x800C;
	enum GLX_EXT_libglvnd = 1;
	enum GLX_VENDOR_NAMES_EXT              = 0x20F6;
	enum GLX_EXT_no_config_context = 1;
	enum GLX_EXT_stereo_tree = 1;
	struct GLXStereoNotifyEventEXT {
    	int type;
    	c_ulong serial;
    	Bool send_event;
    	Display *display;
    	int extension;
    	int evtype;
    	GLXDrawable window;
    	Bool stereo_tree;
	}
	enum GLX_STEREO_TREE_EXT               = 0x20F5;
	enum GLX_STEREO_NOTIFY_MASK_EXT        = 0x00000001;
	enum GLX_STEREO_NOTIFY_EXT             = 0x00000000;
	enum GLX_EXT_swap_control = 1;
	enum GLX_SWAP_INTERVAL_EXT             = 0x20F1;
	enum GLX_MAX_SWAP_INTERVAL_EXT         = 0x20F2;
	enum GLX_EXT_swap_control_tear = 1;
	enum GLX_LATE_SWAPS_TEAR_EXT           = 0x20F3;
	enum GLX_EXT_texture_from_pixmap = 1;
	enum GLX_TEXTURE_1D_BIT_EXT            = 0x00000001;
	enum GLX_TEXTURE_2D_BIT_EXT            = 0x00000002;
	enum GLX_TEXTURE_RECTANGLE_BIT_EXT     = 0x00000004;
	enum GLX_BIND_TO_TEXTURE_RGB_EXT       = 0x20D0;
	enum GLX_BIND_TO_TEXTURE_RGBA_EXT      = 0x20D1;
	enum GLX_BIND_TO_MIPMAP_TEXTURE_EXT    = 0x20D2;
	enum GLX_BIND_TO_TEXTURE_TARGETS_EXT   = 0x20D3;
	enum GLX_Y_INVERTED_EXT                = 0x20D4;
	enum GLX_TEXTURE_FORMAT_EXT            = 0x20D5;
	enum GLX_TEXTURE_TARGET_EXT            = 0x20D6;
	enum GLX_MIPMAP_TEXTURE_EXT            = 0x20D7;
	enum GLX_TEXTURE_FORMAT_NONE_EXT       = 0x20D8;
	enum GLX_TEXTURE_FORMAT_RGB_EXT        = 0x20D9;
	enum GLX_TEXTURE_FORMAT_RGBA_EXT       = 0x20DA;
	enum GLX_TEXTURE_1D_EXT                = 0x20DB;
	enum GLX_TEXTURE_2D_EXT                = 0x20DC;
	enum GLX_TEXTURE_RECTANGLE_EXT         = 0x20DD;
	enum GLX_FRONT_LEFT_EXT                = 0x20DE;
	enum GLX_FRONT_RIGHT_EXT               = 0x20DF;
	enum GLX_BACK_LEFT_EXT                 = 0x20E0;
	enum GLX_BACK_RIGHT_EXT                = 0x20E1;
	enum GLX_FRONT_EXT                     = 0x20DE;
	enum GLX_BACK_EXT                      = 0x20E0;
	enum GLX_AUX0_EXT                      = 0x20E2;
	enum GLX_AUX1_EXT                      = 0x20E3;
	enum GLX_AUX2_EXT                      = 0x20E4;
	enum GLX_AUX3_EXT                      = 0x20E5;
	enum GLX_AUX4_EXT                      = 0x20E6;
	enum GLX_AUX5_EXT                      = 0x20E7;
	enum GLX_AUX6_EXT                      = 0x20E8;
	enum GLX_AUX7_EXT                      = 0x20E9;
	enum GLX_AUX8_EXT                      = 0x20EA;
	enum GLX_AUX9_EXT                      = 0x20EB;
	enum GLX_EXT_visual_info = 1;
	enum GLX_X_VISUAL_TYPE_EXT             = 0x22;
	enum GLX_TRANSPARENT_TYPE_EXT          = 0x23;
	enum GLX_TRANSPARENT_INDEX_VALUE_EXT   = 0x24;
	enum GLX_TRANSPARENT_RED_VALUE_EXT     = 0x25;
	enum GLX_TRANSPARENT_GREEN_VALUE_EXT   = 0x26;
	enum GLX_TRANSPARENT_BLUE_VALUE_EXT    = 0x27;
	enum GLX_TRANSPARENT_ALPHA_VALUE_EXT   = 0x28;
	enum GLX_NONE_EXT                      = 0x8000;
	enum GLX_TRUE_COLOR_EXT                = 0x8002;
	enum GLX_DIRECT_COLOR_EXT              = 0x8003;
	enum GLX_PSEUDO_COLOR_EXT              = 0x8004;
	enum GLX_STATIC_COLOR_EXT              = 0x8005;
	enum GLX_GRAY_SCALE_EXT                = 0x8006;
	enum GLX_STATIC_GRAY_EXT               = 0x8007;
	enum GLX_TRANSPARENT_RGB_EXT           = 0x8008;
	enum GLX_TRANSPARENT_INDEX_EXT         = 0x8009;
	enum GLX_EXT_visual_rating = 1;
	enum GLX_VISUAL_CAVEAT_EXT             = 0x20;
	enum GLX_SLOW_VISUAL_EXT               = 0x8001;
	enum GLX_NON_CONFORMANT_VISUAL_EXT     = 0x800D;
	enum GLX_INTEL_swap_event = 1;
	enum GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK = 0x04000000;
	enum GLX_EXCHANGE_COMPLETE_INTEL       = 0x8180;
	enum GLX_COPY_COMPLETE_INTEL           = 0x8181;
	enum GLX_FLIP_COMPLETE_INTEL           = 0x8182;
	enum GLX_MESA_agp_offset = 1;
	enum GLX_MESA_copy_sub_buffer = 1;
	enum GLX_MESA_pixmap_colormap = 1;
	enum GLX_MESA_query_renderer = 1;
	enum GLX_RENDERER_VENDOR_ID_MESA       = 0x8183;
	enum GLX_RENDERER_DEVICE_ID_MESA       = 0x8184;
	enum GLX_RENDERER_VERSION_MESA         = 0x8185;
	enum GLX_RENDERER_ACCELERATED_MESA     = 0x8186;
	enum GLX_RENDERER_VIDEO_MEMORY_MESA    = 0x8187;
	enum GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA = 0x8188;
	enum GLX_RENDERER_PREFERRED_PROFILE_MESA = 0x8189;
	enum GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA = 0x818A;
	enum GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA = 0x818B;
	enum GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA = 0x818C;
	enum GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA = 0x818D;
	enum GLX_MESA_release_buffers = 1;
	enum GLX_MESA_set_3dfx_mode = 1;
	enum GLX_3DFX_WINDOW_MODE_MESA         = 0x1;
	enum GLX_3DFX_FULLSCREEN_MODE_MESA     = 0x2;
	enum GLX_MESA_swap_control = 1;
	enum GLX_NV_copy_buffer = 1;
	enum GLX_NV_copy_image = 1;
	enum GLX_NV_delay_before_swap = 1;
	enum GLX_NV_float_buffer = 1;
	enum GLX_FLOAT_COMPONENTS_NV           = 0x20B0;
	enum GLX_NV_multigpu_context = 1;
	enum GLX_CONTEXT_MULTIGPU_ATTRIB_NV    = 0x20AA;
	enum GLX_CONTEXT_MULTIGPU_ATTRIB_SINGLE_NV = 0x20AB;
	enum GLX_CONTEXT_MULTIGPU_ATTRIB_AFR_NV = 0x20AC;
	enum GLX_CONTEXT_MULTIGPU_ATTRIB_MULTICAST_NV = 0x20AD;
	enum GLX_CONTEXT_MULTIGPU_ATTRIB_MULTI_DISPLAY_MULTICAST_NV = 0x20AE;
	enum GLX_NV_multisample_coverage = 1;
	enum GLX_COVERAGE_SAMPLES_NV           = 100001;
	enum GLX_COLOR_SAMPLES_NV              = 0x20B3;
	enum GLX_NV_present_video = 1;
	enum GLX_NUM_VIDEO_SLOTS_NV            = 0x20F0;
	enum GLX_NV_video_capture = 1;
	alias GLXVideoCaptureDeviceNV = XID;
	enum GLX_DEVICE_ID_NV                  = 0x20CD;
	enum GLX_UNIQUE_ID_NV                  = 0x20CE;
	enum GLX_NUM_VIDEO_CAPTURE_SLOTS_NV    = 0x20CF;
	enum GLX_NV_video_out = 1;
	alias GLXVideoDeviceNV = uint;
	enum GLX_VIDEO_OUT_COLOR_NV            = 0x20C3;
	enum GLX_VIDEO_OUT_ALPHA_NV            = 0x20C4;
	enum GLX_VIDEO_OUT_DEPTH_NV            = 0x20C5;
	enum GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV  = 0x20C6;
	enum GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV  = 0x20C7;
	enum GLX_VIDEO_OUT_FRAME_NV            = 0x20C8;
	enum GLX_VIDEO_OUT_FIELD_1_NV          = 0x20C9;
	enum GLX_VIDEO_OUT_FIELD_2_NV          = 0x20CA;
	enum GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV = 0x20CB;
	enum GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV = 0x20CC;
	enum GLX_OML_swap_method = 1;
	enum GLX_SWAP_METHOD_OML               = 0x8060;
	enum GLX_SWAP_EXCHANGE_OML             = 0x8061;
	enum GLX_SWAP_COPY_OML                 = 0x8062;
	enum GLX_SWAP_UNDEFINED_OML            = 0x8063;
	enum GLX_OML_sync_control = 1;
	alias __int32 = int;
	alias __int64 = long;
	alias u__int64 = ulong;
	enum GLX_SGIS_blended_overlay = 1;
	enum GLX_BLENDED_RGBA_SGIS             = 0x8025;
	enum GLX_SGIS_multisample = 1;
	enum GLX_SAMPLE_BUFFERS_SGIS           = 100000;
	enum GLX_SAMPLES_SGIS                  = 100001;
	enum GLX_SGIS_shared_multisample = 1;
	enum GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS = 0x8026;
	enum GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS = 0x8027;
	enum GLX_SGIX_dmbuffer = 1;
	alias GLXPbufferSGIX = XID;
	enum GLX_DIGITAL_MEDIA_PBUFFER_SGIX    = 0x8024;
	enum GLX_SGIX_hyperpipe = 1;
	enum GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX = 80;
	enum GLX_BAD_HYPERPIPE_CONFIG_SGIX     = 91;
	enum GLX_BAD_HYPERPIPE_SGIX            = 92;
	enum GLX_HYPERPIPE_DISPLAY_PIPE_SGIX   = 0x00000001;
	enum GLX_HYPERPIPE_RENDER_PIPE_SGIX    = 0x00000002;
	enum GLX_PIPE_RECT_SGIX                = 0x00000001;
	enum GLX_PIPE_RECT_LIMITS_SGIX         = 0x00000002;
	enum GLX_HYPERPIPE_STEREO_SGIX         = 0x00000003;
	enum GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX  = 0x00000004;
	enum GLX_HYPERPIPE_ID_SGIX             = 0x8030;
	struct GLXHyperpipeNetworkSGIX {
	    char[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX]	pipeName;
	    int			networkId;
	}
	struct GLXHyperpipeConfigSGIX {
	    char[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX]    pipeName;
	    int     	channel;
	    uint 		participationType;
	    int     	timeSlice;
	}
	struct GLXPipeRect {
	    char[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX]	pipeName;
	    int srcXOrigin, srcYOrigin, srcWidth, srcHeight;
	    int destXOrigin, destYOrigin, destWidth, destHeight;
	}
	struct GLXPipeRectLimits {
    	char[GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] 	pipeName;
    	int XOrigin, YOrigin, maxHeight, maxWidth;
	}
	enum GLX_SGIX_pbuffer = 1;
	enum GLX_PBUFFER_BIT_SGIX              = 0x00000004;
	enum GLX_BUFFER_CLOBBER_MASK_SGIX      = 0x08000000;
	enum GLX_FRONT_LEFT_BUFFER_BIT_SGIX    = 0x00000001;
	enum GLX_FRONT_RIGHT_BUFFER_BIT_SGIX   = 0x00000002;
	enum GLX_BACK_LEFT_BUFFER_BIT_SGIX     = 0x00000004;
	enum GLX_BACK_RIGHT_BUFFER_BIT_SGIX    = 0x00000008;
	enum GLX_AUX_BUFFERS_BIT_SGIX          = 0x00000010;
	enum GLX_DEPTH_BUFFER_BIT_SGIX         = 0x00000020;
	enum GLX_STENCIL_BUFFER_BIT_SGIX       = 0x00000040;
	enum GLX_ACCUM_BUFFER_BIT_SGIX         = 0x00000080;
	enum GLX_SAMPLE_BUFFERS_BIT_SGIX       = 0x00000100;
	enum GLX_MAX_PBUFFER_WIDTH_SGIX        = 0x8016;
	enum GLX_MAX_PBUFFER_HEIGHT_SGIX       = 0x8017;
	enum GLX_MAX_PBUFFER_PIXELS_SGIX       = 0x8018;
	enum GLX_OPTIMAL_PBUFFER_WIDTH_SGIX    = 0x8019;
	enum GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX   = 0x801A;
	enum GLX_PRESERVED_CONTENTS_SGIX       = 0x801B;
	enum GLX_LARGEST_PBUFFER_SGIX          = 0x801C;
	enum GLX_WIDTH_SGIX                    = 0x801D;
	enum GLX_HEIGHT_SGIX                   = 0x801E;
	enum GLX_EVENT_MASK_SGIX               = 0x801F;
	enum GLX_DAMAGED_SGIX                  = 0x8020;
	enum GLX_SAVED_SGIX                    = 0x8021;
	enum GLX_WINDOW_SGIX                   = 0x8022;
	enum GLX_PBUFFER_SGIX                  = 0x8023;
	enum GLX_SGIX_swap_barrier = 1;
	enum GLX_SGIX_swap_group = 1;
	enum GLX_SGIX_video_resize = 1;
	enum GLX_SYNC_FRAME_SGIX               = 0x00000000;
	enum GLX_SYNC_SWAP_SGIX                = 0x00000001;
	enum GLX_SGIX_video_source = 1;
	alias GLXVideoSourceSGIX = XID;
	enum GLX_SGIX_visual_select_group = 1;
	enum GLX_VISUAL_SELECT_GROUP_SGIX      = 0x8028;

	extern(C) @nogc nothrow:
		alias PFNGLXGETFBCONFIGSPROC = GLXFBConfigP* function (Display* dpy, int screen, int* nelements);
		alias PFNGLXCHOOSEFBCONFIGPROC = GLXFBConfigP* function (Display* dpy, int screen, const(int)* attrib_list, int* nelements);
		alias PFNGLXGETFBCONFIGATTRIBPROC = int function(Display* dpy, GLXFBConfigP config, int attribute, int* value);
		alias PFNGLXGETVISUALFROMFBCONFIGPROC = XVisualInfo* function (Display* dpy, GLXFBConfigP config);
		alias PFNGLXCREATEWINDOWPROC = GLXWindow function(Display* dpy, GLXFBConfigP config, Window win, const(int)* attrib_list);
		alias PFNGLXDESTROYWINDOWPROC = void function(Display* dpy, GLXWindow win);
		alias PFNGLXCREATEPIXMAPPROC = GLXPixmap function(Display* dpy, GLXFBConfigP config, Pixmap pixmap, const(int)* attrib_list);
		alias PFNGLXDESTROYPIXMAPPROC = void function(Display* dpy, GLXPixmap pixmap);
		alias PFNGLXCREATEPBUFFERPROC = GLXPbuffer function(Display* dpy, GLXFBConfigP config, const(int)* attrib_list);
		alias PFNGLXDESTROYPBUFFERPROC = void function(Display* dpy, GLXPbuffer pbuf);
		alias PFNGLXQUERYDRAWABLEPROC = void function(Display* dpy, GLXDrawable draw, int attribute, uint* value);
		alias PFNGLXCREATENEWCONTEXTPROC = GLXContext function(Display* dpy, GLXFBConfigP config, int render_type, GLXContext share_list, Bool direct);
		alias PFNGLXMAKECONTEXTCURRENTPROC = Bool function(Display* dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
		alias PFNGLXGETCURRENTREADDRAWABLEPROC = GLXDrawable function();
		alias PFNGLXQUERYCONTEXTPROC = int function(Display* dpy, GLXContext ctx, int attribute, int* value);
		alias PFNGLXSELECTEVENTPROC = void function(Display* dpy, GLXDrawable draw, c_ulong event_mask);
		alias PFNGLXGETSELECTEDEVENTPROC = void function(Display* dpy, GLXDrawable draw, c_ulong* event_mask);
		alias __GLXextFuncPtr = void function();	
		alias PFNGLXGETPROCADDRESSPROC = __GLXextFuncPtr function(const(GLubyte)* procName);
		alias PFNGLXCREATECONTEXTATTRIBSARBPROC = GLXContext function(Display* dpy, GLXFBConfigP config, GLXContext share_context, Bool direct, const(int)* attrib_list);
		alias PFNGLXGETPROCADDRESSARBPROC = __GLXextFuncPtr function(const(GLubyte)* procName);
		alias PFNGLXGETGPUIDSAMDPROC = uint function (uint maxCount, uint* ids);
		alias PFNGLXGETGPUINFOAMDPROC = int function (uint id, int property, GLenum dataType, uint size, void* data);
		alias PFNGLXGETCONTEXTGPUIDAMDPROC = uint function (GLXContext ctx);
		alias PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC = GLXContext function (uint id, GLXContext share_list);
		alias PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC = GLXContext function (uint id, GLXContext share_context, const(int)* attribList);
		alias PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC = Bool function (GLXContext ctx);
		alias PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC = Bool function (GLXContext ctx);
		alias PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC = GLXContext function ();
		alias PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC = void function (GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
		alias PFNGLXGETCURRENTDISPLAYEXTPROC = Display* function ();
		alias PFNGLXQUERYCONTEXTINFOEXTPROC = int function (Display* dpy, GLXContext context, int attribute, int* value);
		alias PFNGLXGETCONTEXTIDEXTPROC = GLXContextID function (const GLXContext context);
		alias PFNGLXIMPORTCONTEXTEXTPROC = GLXContext function (Display* dpy, GLXContextID contextID);
		alias PFNGLXFREECONTEXTEXTPROC = void function (Display* dpy, GLXContext context);
		alias PFNGLXSWAPINTERVALEXTPROC = void function (Display* dpy, GLXDrawable drawable, int interval);
		alias PFNGLXBINDTEXIMAGEEXTPROC = void function (Display* dpy, GLXDrawable drawable, int buffer, const int* attrib_list);
		alias PFNGLXRELEASETEXIMAGEEXTPROC = void function (Display* dpy, GLXDrawable drawable, int buffer);
		alias PFNGLXGETAGPOFFSETMESAPROC = uint function (const(void)* pointer);
		alias PFNGLXCOPYSUBBUFFERMESAPROC = void function (Display* dpy, GLXDrawable drawable, int x, int y, int width, int height);
		alias PFNGLXCREATEGLXPIXMAPMESAPROC = GLXPixmap function (Display* dpy, XVisualInfo* visual, Pixmap pixmap, Colormap cmap);
		alias PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC = Bool function (int attribute, uint* value);
		alias PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC = const(char)* function (int attribute);
		alias PFNGLXQUERYRENDERERINTEGERMESAPROC = Bool function (Display* dpy, int screen, int renderer, int attribute, uint* value);
		alias PFNGLXQUERYRENDERERSTRINGMESAPROC = const(char)* function (Display* dpy, int screen, int renderer, int attribute);
		alias PFNGLXRELEASEBUFFERSMESAPROC = Bool function (Display* dpy, GLXDrawable drawable);
		alias PFNGLXSET3DFXMODEMESAPROC = GLboolean function (GLint mode);
		alias PFNGLXGETSWAPINTERVALMESAPROC = int function ();
		alias PFNGLXSWAPINTERVALMESAPROC = int function (uint interval);
		alias PFNGLXCOPYBUFFERSUBDATANVPROC = void function (Display* dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
		alias PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC = void function (Display* dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
		alias PFNGLXCOPYIMAGESUBDATANVPROC = void function (Display* dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
		alias PFNGLXDELAYBEFORESWAPNVPROC = Bool function (Display* dpy, GLXDrawable drawable, GLfloat seconds);
		alias PFNGLXJOINSWAPGROUPNVPROC = Bool function (Display* dpy, GLXDrawable drawable, GLuint group);
		alias PFNGLXBINDSWAPBARRIERNVPROC = Bool function (Display* dpy, GLuint group, GLuint barrier);
		alias PFNGLXQUERYSWAPGROUPNVPROC = Bool function (Display* dpy, GLXDrawable drawable, GLuint* group, GLuint* barrier);
		alias PFNGLXQUERYMAXSWAPGROUPSNVPROC = Bool function (Display* dpy, int screen, GLuint* maxGroups, GLuint* maxBarriers);
		alias PFNGLXQUERYFRAMECOUNTNVPROC = Bool function (Display* dpy, int screen, GLuint *count);
		alias PFNGLXRESETFRAMECOUNTNVPROC = Bool function (Display* dpy, int screen);
		alias PFNGLXBINDVIDEOCAPTUREDEVICENVPROC = int function (Display* dpy, uint video_capture_slot, GLXVideoCaptureDeviceNV device);
		alias PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC = GLXVideoCaptureDeviceNV* function (Display* dpy, int screen, int* nelements);
		alias PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC = void function (Display* dpy, GLXVideoCaptureDeviceNV device);
		alias PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC = int function (Display* dpy, GLXVideoCaptureDeviceNV device, int attribute, int* value);
		alias PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC = void function (Display* dpy, GLXVideoCaptureDeviceNV device);
		alias PFNGLXGETVIDEODEVICENVPROC = int function (Display* dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice);
		alias PFNGLXRELEASEVIDEODEVICENVPROC = int function (Display* dpy, int screen, GLXVideoDeviceNV VideoDevice);
		alias PFNGLXBINDVIDEOIMAGENVPROC = int function (Display* dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer);
		alias PFNGLXRELEASEVIDEOIMAGENVPROC = int function (Display* dpy, GLXPbuffer pbuf);
		alias PFNGLXSENDPBUFFERTOVIDEONVPROC = int function (Display* dpy, GLXPbuffer pbuf, int iBufferType, c_ulong* pulCounterPbuffer, GLboolean bBlock);
		alias PFNGLXGETVIDEOINFONVPROC = int function (Display* dpy, int screen, GLXVideoDeviceNV VideoDevice, c_ulong* pulCounterOutputPbuffer, c_ulong* pulCounterOutputVideo);
		alias PFNGLXGETSYNCVALUESOMLPROC = Bool function (Display* dpy, GLXDrawable drawable, int64_t* ust, int64_t* msc, int64_t* sbc);
		alias PFNGLXGETMSCRATEOMLPROC = Bool function (Display* dpy, GLXDrawable drawable, int32_t* numerator, int32_t* denominator);
		alias PFNGLXSWAPBUFFERSMSCOMLPROC = int64_t function (Display* dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder);
		alias PFNGLXWAITFORMSCOMLPROC = Bool function (Display* dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t* ust, int64_t* msc, int64_t* sbc);
		alias PFNGLXWAITFORSBCOMLPROC = Bool function (Display* dpy, GLXDrawable drawable, int64_t target_sbc, int64_t* ust, int64_t* msc, int64_t* sbc);
		//alias PFNGLXASSOCIATEDMPBUFFERSGIXPROC = Bool function (Display* dpy, GLXPbufferSGIX pbuffer, DMparams* params, DMbuffer dmbuffer);
		alias PFNGLXQUERYHYPERPIPENETWORKSGIXPROC = GLXHyperpipeNetworkSGIX* function (Display* dpy, int* npipes);
		alias PFNGLXHYPERPIPECONFIGSGIXPROC = int function (Display* dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX* cfg, int* hpId);
		alias PFNGLXQUERYHYPERPIPECONFIGSGIXPROC = GLXHyperpipeConfigSGIX* function (Display* dpy, int hpId, int* npipes);
		alias PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC = int function (Display* dpy, int hpId);
		alias PFNGLXBINDHYPERPIPESGIXPROC = int function (Display* dpy, int hpId);
		alias PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC = int function (Display* dpy, int timeSlice, int attrib, int size, void* attribList, void* returnAttribList);
		alias PFNGLXHYPERPIPEATTRIBSGIXPROC = int function (Display* dpy, int timeSlice, int attrib, int size, void* attribList);
		alias PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC = int function (Display* dpy, int timeSlice, int attrib, int size, void* returnAttribList);
		//alias PFNGLXCREATEGLXPBUFFERSGIXPROC = GLXPbufferSGIX function (Display* dpy, GLXFBConfigPSGIX config, uint width, uint height, int* attrib_list);
		alias PFNGLXDESTROYGLXPBUFFERSGIXPROC = void function (Display* dpy, GLXPbufferSGIX pbuf);
		alias PFNGLXQUERYGLXPBUFFERSGIXPROC = void function (Display* dpy, GLXPbufferSGIX pbuf, int attribute, uint* value);
		alias PFNGLXSELECTEVENTSGIXPROC = void function (Display* dpy, GLXDrawable drawable, c_ulong mask);
		alias PFNGLXGETSELECTEDEVENTSGIXPROC = void function (Display* dpy, GLXDrawable drawable, c_ulong* mask);
		alias PFNGLXBINDSWAPBARRIERSGIXPROC = void function (Display* dpy, GLXDrawable drawable, int barrier);
		alias PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC = Bool function (Display* dpy, int screen, int* max);
		alias PFNGLXJOINSWAPGROUPSGIXPROC = void function (Display* dpy, GLXDrawable drawable, GLXDrawable member);
		alias PFNGLXBINDCHANNELTOWINDOWSGIXPROC = int function (Display* display, int screen, int channel, Window window);
		alias PFNGLXCHANNELRECTSGIXPROC = int function (Display* display, int screen, int channel, int x, int y, int w, int h);
		alias PFNGLXQUERYCHANNELRECTSGIXPROC = int function (Display* display, int screen, int channel, int* dx, int* dy, int* dw, int* dh);
		alias PFNGLXQUERYCHANNELDELTASSGIXPROC = int function (Display* display, int screen, int channel, int* x, int* y, int* w, int* h);
		alias PFNGLXCHANNELRECTSYNCSGIXPROC = int function (Display* display, int screen, int channel, GLenum synctype);
	
		Bool glXQueryExtension(Display* dpy, int* error_base, int* event_base);
		Bool glXQueryVersion(Display* dpy, int* major, int* minor);
		const(char)* glXQueryExtensionsString(Display* dpy, int screen);
		const(char)* glXGetClientString(Display* dpy, int name);
		const(char)* glXQueryServerString(Display* dpy, int screen, int name);
		GLXFBConfigP* glXGetFBConfigs(Display* dpy, int screen, int* nelements);
		GLXFBConfigP* glXChooseFBConfig(Display* dpy, int screen, const(int)* attrib_list, int* nelements);
		int glXGetFBConfigAttrib(Display* dpy, GLXFBConfigP config, int attribute, int* value);
		XVisualInfo *glXGetVisualFromFBConfig(Display* dpy, GLXFBConfigP config);
		GLXWindow glXCreateWindow(Display* dpy, GLXFBConfigP config, Window win, const(int)* attrib_list);
		void glXDestroyWindow(Display* dpy, GLXWindow win);
		GLXPixmap glXCreatePixmap(Display* dpy, GLXFBConfigP config, Pixmap pixmap, const(int)* attrib_list);
		void glXDestroyPixmap(Display* dpy, GLXPixmap pixmap);
		GLXPbuffer glXCreatePbuffer(Display* dpy, GLXFBConfigP config, const(int)* attrib_list);
		void glXDestroyPbuffer(Display* dpy, GLXPbuffer pbuf);
		void glXQueryDrawable(Display* dpy, GLXDrawable draw, int attribute, uint* value);
		GLXContext glXCreateNewContext(Display* dpy, GLXFBConfigP config, int render_type, GLXContext share_list, 
				Bool direct);
		Bool glXIsDirect(Display* dpy, GLXContext ctx);
		void glXDestroyContext(Display* dpy, GLXContext ctx);
		Bool glXMakeContextCurrent(Display* dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
		void glXCopyContext(Display* dpy, GLXContext source, GLXContext dest, c_ulong mask);
		GLXContext glXGetCurrentContext();
		GLXDrawable glXGetCurrentDrawable();
		GLXDrawable glXGetCurrentReadDrawable();
		Display* glXGetCurrentDisplay();
		int glXQueryContext(Display* dpy, GLXContext ctx, int attribute, int* value);
		void glXSelectEvent(Display* dpy, GLXDrawable draw, c_ulong event_mask);
		void glXGetSelectedEvent(Display* dpy, GLXDrawable draw, c_ulong* event_mask);
		void glXWaitGL();
		void glXSwapBuffers(Display* dpy, GLXDrawable draw);
		void glXUseXFont(Font font, int first, int count, int list_base);
		int glXGetConfig(Display* dpy, XVisualInfo* visual, int attribute, int* value);
		XVisualInfo* glXChooseVisual(Display* dpy, int screen, int* attrib_list);
		GLXPixmap glXCreateGLXPixmap(Display* dpy, XVisualInfo* visual, Pixmap pixmap);
		GLXContext glXCreateContext(Display* dpy, XVisualInfo* visual, GLXContext share_list, Bool direct);
		Bool glXMakeCurrent(Display* dpy, GLXDrawable draw, GLXContext ctx);
		GLXContext glXCreateContextAttribsARB(Display* dpy, GLXFBConfigP config, GLXContext share_context, Bool direct, const(int)* attrib_list);
		//Might not be present block begin
		__GLXextFuncPtr glXGetProcAddress (const(GLubyte)* procName); //Might not be present
		__GLXextFuncPtr glXGetProcAddressARB (const(GLubyte)* procName); //Might not be present
		uint glXGetGPUIDsAMD (uint maxCount, uint* ids);
		int glXGetGPUInfoAMD (uint id, int property, GLenum dataType, uint size, void* data);
		uint glXGetContextGPUIDAMD (GLXContext ctx);
		GLXContext glXCreateAssociatedContextAMD (uint id, GLXContext share_list);
		GLXContext glXCreateAssociatedContextAttribsAMD (uint id, GLXContext share_context, const int* attribList);
		Bool glXDeleteAssociatedContextAMD (GLXContext ctx);
		Bool glXMakeAssociatedContextCurrentAMD (GLXContext ctx);
		GLXContext glXGetCurrentAssociatedContextAMD ();
		void glXBlitContextFramebufferAMD (GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
		Display *glXGetCurrentDisplayEXT ();
		int glXQueryContextInfoEXT (Display* dpy, GLXContext context, int attribute, int* value);
		GLXContextID glXGetContextIDEXT (const GLXContext context);
		GLXContext glXImportContextEXT (Display* dpy, GLXContextID contextID);
		void glXFreeContextEXT (Display* dpy, GLXContext context);
		void glXSwapIntervalEXT (Display* dpy, GLXDrawable drawable, int interval);
		void glXBindTexImageEXT (Display* dpy, GLXDrawable drawable, int buffer, const(int)* attrib_list);
		void glXReleaseTexImageEXT (Display* dpy, GLXDrawable drawable, int buffer);
		uint glXGetAGPOffsetMESA (const(void)* pointer);
		void glXCopySubBufferMESA (Display* dpy, GLXDrawable drawable, int x, int y, int width, int height);
		GLXPixmap glXCreateGLXPixmapMESA (Display* dpy, XVisualInfo* visual, Pixmap pixmap, Colormap cmap);
		Bool glXQueryCurrentRendererIntegerMESA (int attribute, uint* value);
		const(char)* glXQueryCurrentRendererStringMESA (int attribute);
		Bool glXQueryRendererIntegerMESA (Display* dpy, int screen, int renderer, int attribute, uint* value);
		const(char)* glXQueryRendererStringMESA (Display* dpy, int screen, int renderer, int attribute);
		Bool glXReleaseBuffersMESA (Display* dpy, GLXDrawable drawable);
		GLboolean glXSet3DfxModeMESA (GLint mode);
		int glXGetSwapIntervalMESA ();
		int glXSwapIntervalMESA (uint interval);
		void glXCopyBufferSubDataNV (Display* dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
		void glXNamedCopyBufferSubDataNV (Display* dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
		void glXCopyImageSubDataNV (Display* dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
		Bool glXDelayBeforeSwapNV (Display* dpy, GLXDrawable drawable, GLfloat seconds);
		Bool glXJoinSwapGroupNV (Display* dpy, GLXDrawable drawable, GLuint group);
		Bool glXBindSwapBarrierNV (Display* dpy, GLuint group, GLuint barrier);
		Bool glXQuerySwapGroupNV (Display* dpy, GLXDrawable drawable, GLuint* group, GLuint* barrier);
		Bool glXQueryMaxSwapGroupsNV (Display* dpy, int screen, GLuint* maxGroups, GLuint* maxBarriers);
		Bool glXQueryFrameCountNV (Display* dpy, int screen, GLuint* count);
		Bool glXResetFrameCountNV (Display* dpy, int screen);
		int glXBindVideoCaptureDeviceNV (Display* dpy, uint video_capture_slot, GLXVideoCaptureDeviceNV device);
		GLXVideoCaptureDeviceNV* glXEnumerateVideoCaptureDevicesNV (Display* dpy, int screen, int* nelements);
		void glXLockVideoCaptureDeviceNV (Display* dpy, GLXVideoCaptureDeviceNV device);
		int glXQueryVideoCaptureDeviceNV (Display* dpy, GLXVideoCaptureDeviceNV device, int attribute, int* value);
		void glXReleaseVideoCaptureDeviceNV (Display* dpy, GLXVideoCaptureDeviceNV device);
		int glXGetVideoDeviceNV (Display* dpy, int screen, int numVideoDevices, GLXVideoDeviceNV* pVideoDevice);
		int glXReleaseVideoDeviceNV (Display* dpy, int screen, GLXVideoDeviceNV VideoDevice);
		int glXBindVideoImageNV (Display* dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer);
		int glXReleaseVideoImageNV (Display* dpy, GLXPbuffer pbuf);
		int glXSendPbufferToVideoNV (Display* dpy, GLXPbuffer pbuf, int iBufferType, c_ulong* pulCounterPbuffer, GLboolean bBlock);
		int glXGetVideoInfoNV (Display* dpy, int screen, GLXVideoDeviceNV VideoDevice, c_ulong* pulCounterOutputPbuffer, c_ulong* pulCounterOutputVideo);
		Bool glXGetSyncValuesOML (Display* dpy, GLXDrawable drawable, int64_t* ust, int64_t* msc, int64_t* sbc);
		Bool glXGetMscRateOML (Display* dpy, GLXDrawable drawable, int32_t* numerator, int32_t* denominator);
		int64_t glXSwapBuffersMscOML (Display* dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder);
		Bool glXWaitForMscOML (Display* dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t* ust, int64_t* msc, int64_t* sbc);
		Bool glXWaitForSbcOML (Display* dpy, GLXDrawable drawable, int64_t target_sbc, int64_t* ust, int64_t* msc, int64_t* sbc);
		//Bool glXAssociateDMPbufferSGIX (Display* dpy, GLXPbufferSGIX pbuffer, DMparams* params, DMbuffer dmbuffer);
		GLXHyperpipeNetworkSGIX* glXQueryHyperpipeNetworkSGIX (Display* dpy, int* npipes);
		int glXHyperpipeConfigSGIX (Display* dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX* cfg, int* hpId);
		GLXHyperpipeConfigSGIX* glXQueryHyperpipeConfigSGIX (Display* dpy, int hpId, int* npipes);
		int glXDestroyHyperpipeConfigSGIX (Display* dpy, int hpId);
		int glXBindHyperpipeSGIX (Display* dpy, int hpId);
		int glXQueryHyperpipeBestAttribSGIX (Display* dpy, int timeSlice, int attrib, int size, void* attribList, void* returnAttribList);
		int glXHyperpipeAttribSGIX (Display* dpy, int timeSlice, int attrib, int size, void* attribList);
		int glXQueryHyperpipeAttribSGIX (Display* dpy, int timeSlice, int attrib, int size, void* returnAttribList);
		//GLXPbufferSGIX glXCreateGLXPbufferSGIX (Display* dpy, GLXFBConfigPSGIX config, uint width, uint height, int* attrib_list);
		//void glXDestroyGLXPbufferSGIX (Display* dpy, GLXPbufferSGIX pbuf);
		//void glXQueryGLXPbufferSGIX (Display* dpy, GLXPbufferSGIX pbuf, int attribute, uint* value);
		void glXSelectEventSGIX (Display* dpy, GLXDrawable drawable, c_ulong mask);
		void glXGetSelectedEventSGIX (Display* dpy, GLXDrawable drawable, c_ulong* mask);
		void glXBindSwapBarrierSGIX (Display* dpy, GLXDrawable drawable, int barrier);
		Bool glXQueryMaxSwapBarriersSGIX (Display* dpy, int screen, int* max);
		void glXJoinSwapGroupSGIX (Display* dpy, GLXDrawable drawable, GLXDrawable member);
		int glXBindChannelToWindowSGIX (Display* display, int screen, int channel, Window window);
		int glXChannelRectSGIX (Display* display, int screen, int channel, int x, int y, int w, int h);
		int glXQueryChannelRectSGIX (Display* display, int screen, int channel, int* dx, int* dy, int* dw, int* dh);
		int glXQueryChannelDeltasSGIX (Display* display, int screen, int channel, int* x, int* y, int* w, int* h);
		int glXChannelRectSyncSGIX (Display* display, int screen, int channel, GLenum synctype);
		//Might not be present block end
}